<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[lua表访问跟踪]]></title>
    <url>%2F2018%2F12%2F05%2Flua%E8%A1%A8%E8%AE%BF%E9%97%AE%E8%B7%9F%E8%B8%AA%2F</url>
    <content type="text"><![CDATA[当访问一个 table 或者更新 table 中的某个元素时，lua 首先会在 table 查找是否存在该元素，如果没有，就会查找 table 是否存在 index(访问) 或者 newindex(更新) 原方法。以访问为例，首先在 table 中查找某个字段，如果不存在，解释器会去查找 index 这个原方法，如果仍然没有，返回 nil。所以说，index 和 __newindex 是在 table 中没有所需访问的 index 时才发挥作用的。 根据上面这种思路，如果我们想跟踪一个 table 的操作行为，那么需要一个空表，每次对这个空表操作的时候，就会使用 index 或者 newindex 这些元方法，在元方法中对原始 table 进行访问和操作，并打印跟踪信息。而之前创建的那个空表，就是代理。 --------------------------------------------- print &quot;跟踪单个表&quot; local _t = {} local mt = { __newindex = function(t, name, value) print(&quot;__newindex&quot;, name, value) --rawset(_t, name, value) --原始访问 不访问原表 _t[name] = value end, __index = function(t, name) print(&quot;__index&quot;, name, value) --return rawget(_t, name) --原始访问 不访问原表 return _t[name] end } --a.__index = a local a = {} setmetatable(a, mt) a.x = 1 print(a.x) --------------------------------------------- print &quot;跟踪多个表&quot; local index = {} -- 创建私有索引，即原表在代理表中特殊字段 local mt = { __index = function (t, k) print(&quot;__index &quot; .. tostring(k)) return t[index][k] end, __newindex = function (t, k, v) print(&quot;__newindex &quot; .. tostring(k) .. &quot; to &quot; .. tostring(v)) t[index][k] = v end } function track (t) local proxy = {} proxy[index] = t setmetatable(proxy, mt) return proxy end local ori_table = {} --在其他地方创建的原表，对他进行跟踪 local _o = track(ori_table) _o[2] = &quot;lua&quot; print(_o[2])]]></content>
      <categories>
        <category>lua</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua高级特性]]></title>
    <url>%2F2018%2F12%2F05%2Flua%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[条件表达式 实现类似c++中a?b:c的效果。 a and b or c – a 为true则返回b or c, a为false则返回false (a and b)or c – a 为true则返回 弱引用 元表 __mode字段来设置表k,v是弱引用，被弱引用table引用，垃圾回收时可回收，只要k,v被回收，整个条目会删除。 Lua采用了基于垃圾收集的内存管理机制，当某个table对象被存放在容器中，而容器的外部不再有任何变量引用该对象，对于这样的对象，Lua的垃圾收集器是不会清理的，因为容器对象仍然引用着他。见如下代码： a = {} key = {} a[key] = 1 key = {} a[key] = 2 collectgarbage() for k,v inpairs(a) do print(v) end --输出1 2 ​ 在执行垃圾收集之后，table a中的两个key都无法被清理，但是对value等于1的key而言，如果后面的逻辑不会遍历table a的话，那么我们就可以认为该对象内存泄露了。在Lua中提供了一种被称为弱引用table的机制，可以提示垃圾收集器，如果某个对象，如上面代码中的第一个table key，只是被弱引用table引用，那么在执行垃圾收集时可以将其清理。 ​ Lua中的弱引用表提供了3中弱引用模式，即key是弱引用、value是弱引用，以及key和value均是弱引用。不论是哪种类型的弱引用table，只要有一个key或value被回收，那么它们所在的整个条目都会从table中删除。 ​ 一个table的弱引用类型是通过其元表的__mode字段来决定的。如果该值为包含字符”k”，那么table就是key弱引用，如果包含”v”，则是value若引用，如果两个字符均存在，就是key/value弱引用。见如下代码： 1 a = {} 2 b = {__mode = “k”} 3setmetatable(a,b) 4 key = {} 5 a[key] = 1 6 key = {} 7 a[key] = 2 8collectgarbage() 9for k,v inpairs(a) do 10print(v) 11end 12–仅仅输出2 ​ 在上面的代码示例中，第一个key在被存放到table a之后，就被第二个key的定义所覆盖，因此它的唯一引用来自key弱引用表。事实上，这种机制在Java中也同样存在，Java在1.5之后的版本中也提供了一组弱引用容器，其语义和Lua的弱引用table相似。 ​ 最后需要说明的是，Lua中的弱引用表只是作用于table类型的变量，对于其他类型的变量，如数值和字符串等，弱引用表并不起任何作用。 2.尾递归 什么是尾递归 尾递归的写法只是具备了使当前函数在调用下一个函数前把当前占有的栈销毁，但是会不会真的这样做，是要具体看编译器是否最终这样做。 什么是尾递归呢?(tail recursion), 顾名思议，就是一种“不一样的”递归，说到它的不一样，就得先说说一般的递归。对于一般的递归，比如下面的求阶乘，教科书上会告诉我们，如果这个函数调用的深度太深，很容易会有爆栈的危险。 // 先不考虑溢出问题int func(int n) { if (n &lt;= 1) return1; return (n * func(n-1)); } 原因很多人的都知道，让我们先回顾一下函数调用的大概过程： 1）调用开始前，调用方（或函数本身）会往栈上压相关的数据，参数，返回地址，局部变量等。 2）执行函数。 3）清理栈上相关的数据，返回。 因此，在函数 A 执行的时候，如果在第二步中，它又调用了另一个函数 B，B 又调用 C…. 栈就会不断地增长不断地装入数据，当这个调用链很深的时候，栈很容易就满 了，这就是一般递归函数所容易面临的大问题。 而尾递归在某些语言的实现上，能避免上述所说的问题，注意是某些语言上，尾递归本身并不能消除函数调用栈过长的问题，那什么是尾递归呢？在上面写的一般递归函数 func() 中，我们可以看到，func(n) 是依赖于 func(n-1) 的，func(n) 只有在得到 func(n-1) 的结果之后，才能计算它自己的返回值，因此理论上，在 func(n-1) 返回之前，func(n)，不能结束返回。因此func(n)就必须保留它在栈上的数据，直到func(n-1)先返回，而尾递归的实现则可以在编译器的帮助下，消除这个限制： // 先不考虑溢出int tail_func(int n, int res) { if (n &lt;= 1) return res; return tail_func(n - 1, n * res); } // 像下面这样调用 tail_func(10000000000, 1); 从上可以看到尾递归把返回结果放到了调用的参数里。这个细小的变化导致，tail_func(n, res)不必像以前一样，非要等到拿到了tail_func(n-1, nres)的返回值，才能计算它自己的返回结果 – 它完全就等于tail_func(n-1, nres)的返回值。因此理论上：tail_func(n)在调用tail_func(n-1)前，完全就可以先销毁自己放在栈上的东西。 这就是为什么尾递归如果在得到编译器的帮助下，是完全可以避免爆栈的原因：每一个函数在调用下一个函数之前，都能做到先把当前自己占用的栈给先释放了，尾递归的调用链上可以做到只有一个函数在使用栈，因此可以无限地调用！ 所谓尾调用，就是一个函数返回另一个函数的返回值： 复制代码代码如下: function f() … return g() end 因为调用g()后，f()中不再执行任何代码，所以不需要保留f()的调用桟信息；Lua做了这样的优化，称为”尾调用消除”，g()返回后，控制点直接返回到调用f()的地方。 这种优化对尾递归非常有益，通常递归意味着调用桟的不断增长，甚至可能造成堆栈溢出；而尾递归提供了优化条件，编译器可以优化掉调用桟 3.元表相关 table存在两种行为：查询和修改（赋值），通过元方法index和newindex来改变table的这两种行为。 __index主要用于table的查询 table[key] 的访问过程，首先检查table表中是否存在key的字段，如果有则返回，否则检查是否有__index的元方法，没有返回nil,有则查找元方法。 __index元方法可以是一个函数，还可以是一个table。如果是一个函数，则以table和不存在的key作为参数方位该函数， 例如：__index = function(t,key) 如果是一个table时，就以相同的方式来访问这个table（即传入key访问元方法的table，如果存在则放回值，反之返回nil） 例如：__index = tab –此时会返回tab[key]的值 __index可以很好的实现具有默认值的table function setDefaultValues(t,d) ​ local mt = {__index = function() return d end} ​ setmetatable(t, mt) end tab = {x=10,y=20} print(tab.x ,tab.y,tab.z) –由于没有设置元方法则为nil setDefaultValues(tab,100) –设置默认值（设置__index元方法） print(tab.z) –检查到有__index的元方法则返回默认值 __newindex主要用于table的更新 当对table中不存在的索引赋值时，解释器就会查找__newindex元方法。如果有这个元方法，就调用这个元方法，而不是执行复制。如果这个元方法是一个table，解释器就在table中进行赋值，而不是对原来的table。 local k = {} local mt = { ​ __newindex = k } local t = {} setmetatable(t, mt) print(“赋值前：”) for k,v in pairs(k) do ​ print(k ,v) end t[1] = 20 print(“赋值后：t表中的值:”) for k,v in pairs(t) do ​ print(k ,v) end print(“赋值后：k表中的值:”) for k,v in pairs(k) do ​ print(k ,v) end 4.class的实现 子类在定义时复制所有基类的方法，在实例化时将该类作为metatable的__index赋值给实例。这就是cocos2dx里面的lua class的实现。 function class(classname, super) ​ local cls = {} ​ if super then –复制基类方法 ​ cls = {} ​ for k,v in pairs(super) do cls[k] = v end ​ cls.super = super ​ else ​ cls = {ctor = function() end} ​ end ​ cls.__cname = classname ​ cls.__index = cls ​ function cls.new(…) –实例化 ​ local instance = setmetatable({}, cls) ​ instance.class = cls ​ instance:ctor(…) ​ return instance ​ end ​ return cls end 5.闭包实现 Lua使用闭包的扁平表示: GC头部包含了垃圾回收信息； 闭包包含了一个指向原型的指针，原型包含了函数的所有静态信息：主要部分是函数编译之后的代码，其余包括参数个数、调试信息和其他类似的数据; 闭包还包含0个或多个指向upvalue的指针，每个upvalue表示一个由闭包使用的非局部变量. Lua闭包实现的核心部件是upvalue结构，它表示了一个闭包和一个变量的连接. 用于访问upvalue的虚拟机指令有2条：GETUPVALUE将一个upvalue的值复制到寄存器；SETUPVALUE将一个寄存器的值复制到upvalue。 一个upvalue有两种状态：open和closed。当一个upvalue被创建时，它是open的，并且它的指针指向Lua栈中对应的变量。当Lua关闭了一个upvalue，upvalue指向的值被复制到upvalue结构内部，并且指针也相应进行调整 6.table，string的实现 lua中对基础数据类型使用统一的数据结构TValue表示，value_表示值，tt_表示数据类型。由此可知Value是一个union结构 对于nil,boolean,lightuserdata,number,cfunction这些数据类型的值都是直接存放在TValue中，其他类型的数据都用GCObject来表示，TValue中只是保存GCObject结构的指针 TString /* ** creates a new string object */ static TString createstrobj (lua_State L, const char *str, size_t l, ​ int tag, unsigned int h, GCObject **list) { TString *ts; size_t totalsize; / total size of TString object / totalsize = sizeof(TString) + ((l + 1) * sizeof(char)); ts = &amp;luaC_newobj(L, tag, totalsize, list, 0)-&gt;ts; ts-&gt;tsv.len = l; ts-&gt;tsv.hash = h; ts-&gt;tsv.extra = 0; memcpy(ts+1, str, l*sizeof(char)); ((char )(ts+1))[l] = ‘\0’; / ending 0 */ return ts; } ​ 图1-2 从代码可以看出，字符串在lua的内存分配结构，如图1-2所示。lua字符串都自动加上结束符。 C代码 /* ** new string (with explicit length) */ TString luaS_newlstr (lua_State L, const char *str, size_t l) { if (l &lt;= LUAI_MAXSHORTLEN) / short string? / ​ return internshrstr(L, str, l); else { ​ if (l + 1 &gt; (MAX_SIZET - sizeof(TString))/sizeof(char)) ​ luaM_toobig(L); ​ return createstrobj(L, str, l, LUA_TLNGSTR, G(L)-&gt;seed, NULL); } } ​ 在实际中对字符串的使用大部分都是很短的，所以lua保存字符串分为短字符串和长字符串，短字符串都保存在全局的字符串hash表中，长字符串则放在全局的可gc对象列表中。 static TString internshrstr (lua_State L, const char *str, size_t l) { GCObject *o; global_State *g = G(L); unsigned int h = luaS_hash(str, l, g-&gt;seed); for (o = g-&gt;strt.hash[lmod(h, g-&gt;strt.size)]; ​ o != NULL; ​ o = gch(o)-&gt;next) { ​ TString *ts = rawgco2ts(o); ​ if (h == ts-&gt;tsv.hash &amp;&amp; ​ l == ts-&gt;tsv.len &amp;&amp; ​ (memcmp(str, getstr(ts), l * sizeof(char)) == 0)) { ​ if (isdead(G(L), o)) / string is dead (but was not collected yet)? / ​ changewhite(o); / resurrect it / ​ return ts; ​ } } return newshrstr(L, str, l, h); / not found; create a new string / } ​ 短字符串的hash表采用开放寻址hash算法，在处理一个短字符串的时候对首先判断字符串在hash表中是否已存在，存在则直接返回其地址；不存在则创建该字符串，并求出其hash值。长字符串则都重新分配内存保存。因此在对比两个字符串是否相等时，短字符串只要比较地址是否相等就行了，而对于长字符串则需要对比所有字符。由此可见lua中对于短字符串的处理很高效，一般用于字符串的比较，或者用作table的key。 Table lua中的table是key-value的形式来存放数据的，table分为两部分：数组部分array和hash部分。array和sizearray为数组部分，node，lastfree，lsizenode为hash部分。 数组段和 hash 段两个部分。数字 key 一般放在数组段中，没有初始化过的 key 值全部设置为 nil 。当数字 key 过于离散的时候，部分较大的数字 key 会被移到 hash段中去。 key为你init 当key小于数组长度时，则直接返回数组中的值，否则计算key的hash值，从表的hash部分查找key的值。 当key为string 统一调用mainposition获取其hash值对应的散列地址. 当给table的key赋值的时候，会先查找key是否存在，如果存在则对value重新赋值，如果不存在则表示key也不存在，会调用luaH_newkey创建key，然后再对value赋值。在创建key的时候如果table的大小不够会触发rehash对表进行扩大。 7.gc相关 采用垃圾回收机制对所有的lua对象(GCObject)进行管理。Lua虚拟机会定期运行GC，释放掉已经不再被被引用到的lua对象。 基本算法【标记清除】 基本的垃圾回收算法被称为”mark-and-sweep”算法。算法本身其实很简单。 1.系统管理着所有已经创建了的对象。每个对象都有对其他对象的引用。 2.root集合代表着已知的系统级别的对象引用。 3.从root集合出发，就可以访问到系统引用到的所有对象。而没有被访问到的对象就是垃圾对象，需要被销毁。 我们可以将所有对象分成三个状态： White状态，也就是待访问状态。表示对象还没有被垃圾回收的标记过程访问到。 Gray状态，也就是待扫描状态。表示对象已经被垃圾回收访问到了，但是对象本身对于其他对象的引用还没有进行遍历访问。 Black状态，也就是已扫描状态。表示对象已经被访问到了，并且也已经遍历了对象本身对其他对象的引用。 基本的算法可以描述如下： 当前所有对象都是White状态; 将root集合引用到的对象从White设置成Gray，并放到Gray集合中; while(Gray集合不为空) { ​ 从Gray集合中移除一个对象O，并将O设置成Black状态; ​ for(O中每一个引用到的对象O1) { ​ if(O1在White状态) { ​ 将O1从White设置成Gray，并放到到Gray集合中； ​ } ​ } } for(任意一个对象O){ ​ if(O在White状态) ​ 销毁对象O; ​ else ​ 将O设置成White状态; } Incremental Garbage Collection 上面的算法如果一次性执行，在对象很多的情况下，会执行很长时间，严重影响程序本身的响应速度。其中一个解决办法就是，可以将上面的算法分步执行，这样每个步骤所耗费的时间就比较小了。我们可以将上述算法改为以下下几个步骤。 首先标识所有的root对象： 当前所有对象都是White状态; 将root集合引用到的对象从White设置成Gray，并放到Gray集合中; 遍历访问所有的gray对象。如果超出了本次计算量上限，退出等待下一次遍历: while(Gray集合不为空,并且没有超过本次计算量的上限){ ​ 从Gray集合中移除一个对象O，并将O设置成Black状态; ​ for(O中每一个引用到的对象O1) { ​ if(O1在White状态) { ​ 将O1从White设置成Gray，并放到到Gray集合中； ​ } ​ } } 销毁垃圾对象： for(任意一个对象O){ ​ if(O在White状态) ​ 销毁对象O; ​ else ​ 将O设置成White状态; } 在每个步骤之间，由于程序可以正常执行，所以会破坏当前对象之间的引用关系。black对象表示已经被扫描的对象，所以他应该不可能引用到一个white对象。当程序的改变使得一个black对象引用到一个white对象时，就会造成错误。解决这个问题的办法就是设置barrier。barrier在程序正常运行过程中，监控所有的引用改变。如果一个black对象需要引用一个white对象，存在两种处理办法： 将white对象设置成gray，并添加到gray列表中等待扫描。这样等于帮助整个GC的标识过程向前推进了一步。 将black对象该回成gray，并添加到gray列表中等待扫描。这样等于使整个GC的标识过程后退了一步。 这种垃圾回收方式被称为”Incremental Garbage Collection”(简称为”IGC”，Lua所采用的就是这种方法。使用”IGC”并不是没有代价的。IGC所检测出来的垃圾对象集合比实际的集合要小，也就是说，有些在GC过程中变成垃圾的对象，有可能在本轮GC中检测不到。不过，这些残余的垃圾对象一定会在下一轮GC被检测出来，不会造成泄露。]]></content>
      <categories>
        <category>lua</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua和c交互原理]]></title>
    <url>%2F2018%2F12%2F05%2Flua%E5%92%8Cc%E4%BA%A4%E4%BA%92%2F</url>
    <content type="text"><![CDATA[luastate]]></content>
      <categories>
        <category>lua</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git重点用法]]></title>
    <url>%2F2018%2F12%2F05%2Fgit%E9%87%8D%E7%82%B9%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[流程 Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 基本操作 放入暂存区git add .git add file 提交到仓库git commit -m &#39;log&#39; 撤销工作区修改git checkout -- filegit checkout . 暂存区回退到工作区git reset HEAD file Reset回退commit回滚commit,工作区暂存区也改变git reset --hard commitid只回滚commit,工作区暂存区代码没有改变git reset --soft commitid回滚commit,暂存区改变,工作区不变git reset -mixed commitid 等同 git reset commitid revert回退commit git revert commit 但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在. 而reset是指将HEAD指针指到指定提交,历史记录中不会出现放弃的提交记录. commit id查看git loggit reflog git pushgit push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;推送本地master分支到远程origin主机的master分支，后者不存在就创建git push origin master 省略了远程分支名 git pullgit pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;远程主机origin的master分支拉取过来，与本地的brantest分支合并:git pull origin master:brantest将远程origin主机的master分支拉取过来和本地的当前分支进行合并git pull origin master 远程操作 本地代码回滚到commitidgit reset --hard commitid 远程代码回回滚方法1：回滚后强制推送本地到远程git reset --hard commitidgit push origin branch -f方法2：且分支在分支上reset然后删除远程分支，使用本地分支重新远程分支git checkout the_branch git branch bk git pull git reset --hard th_commit_id git push origin :the_branch 删除远程then_branch git push origin the_branch 特殊操作 删除某次提交 git rebase -i commitid^ 在命令编辑里边把某次提交之前的内容改为drop.退出交互模式,就会删除相应commit.之后强制推送就ok. 修改某次提交 git rebase -i commitid^ 在编辑框中把需要修改的某次提交所在commit之前的pick改为edit然后保存退出.之后做出修改,完成之后执行如下命令： git add . git commit --amend git rebase --continue 子仓库主要用于工程中以来的第三方库，第三方库是独立的git仓库可以自行管理. 添加submodule git submodule add 仓库地址 localpath 会在.gitmodules和.git/config中添加submodule路径和对应的仓库库地址 clone父仓库之后更新子仓库 git submodule init git submodule update submodule修改后再localpath中 add commit push 删除submodule 删除.gitmodules和.git.config中的submodule信息;git rm –cached localpath. 合并代码 git merge $ git merge issueFix 如果没有冲突的话，merge完成。有冲突的话，git会提示那个文件中有冲突，比如有如下冲突： &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:test.c printf (“test1″); ======= printf (“test2″); >&gt;&gt;&gt;&gt;&gt;&gt; issueFix:test.c 可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时检出的分支）中的内容，下半部分是在 issueFix 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决： printf (“test2″); 这个解决方案各采纳了两个分支中的一部分内容，而且删除了 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，和&gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决（resolved）。 分支操作 创建分支 git branch bname 切换分支 git checkout bname 创建并切分支 git checkout -b bname git checkout -b 本地分支名x origin/远程分支名x git checkout -b dev origin/dev 远程分支dev切分支到本地dev分支 查看分支 git branch -av]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cocos2dx性能优化]]></title>
    <url>%2F2018%2F12%2F03%2Fcocos2dx%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>cocos2dx</category>
      </categories>
      <tags>
        <tag>cocos2dx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang服务器开发]]></title>
    <url>%2F2018%2F11%2F30%2Fgolang%2F</url>
    <content type="text"><![CDATA[golang开发笔记涉及内容包括web服务器、游戏服务器的开始使用,包括一些开元的golang软件的解读. leaf goworld 等教程. 同时会有一些游戏demo展示. 跳转链接： golang深度解析 leaf解析 goworld解析 https://gameloses.github.io/golang/]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>go</tag>
        <tag>游戏服务器</tag>
        <tag>leaf</tag>
        <tag>goworld</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitbook使用]]></title>
    <url>%2F2018%2F11%2F28%2Fgitbook%2F</url>
    <content type="text"><![CDATA[Gitbook的搭建 gitbook是一个npm工具使用的是git和markdown技术支持构建多种格式的ebook. 安装npm install gitbook-cli gitbook -V 初始化创建一个空目录,生成README.md SUMMARY.md两个文件,使用如下命令 gitbook init README.md —— 书籍的介绍写在这个文件里 SUMMARY.md —— 书籍的目录结构在这里配置 编辑电子书目录编辑 * [第一章](section1/README.md) * [第一节](section1/example1.md) * [第二节](section1/example2.md) * [第二章](section2/README.md) * [第一节](section2/example1.md) 目录支持三级，目录中可以带链接.名录名+链接的方式.链接即相对md文件名字. 本地预览gitbook serve 发布电子书gitbook build 在本地目录生成_book静态网页电子书 生成电子书安装插件calibre. https://calibre-ebook.com/download 添加环境变量： cd ~ vim .bash_profile PATH = /Applications/calibre.app/Contents/MacOS:${PATH}&quot; source .bash_profile 生成电子书命令如下： gitbook pdf gitbook mobi 部署到github利用gh-pages将gitbook生成的静态网页发布到github pages上. 安装gh-pages npm install g gh-pages 在github上创建仓库例如cocos2dx 将书籍源码push到仓库的master分支 将_book发布到github仓库的gh-pages分支 gitbook build gh-pages -d _book]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Gitbook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github上搭建hexo博客]]></title>
    <url>%2F2018%2F11%2F23%2Fhexo%E6%90%AD%E5%BB%BAgithubblog%2F</url>
    <content type="text"><![CDATA[打算在github上搭建起hexo博客和gitbook,主要记录一些技术积累.涉及游戏开前后端区块链等.解读一些开源的库.像skynet,pomelo,kbengine,coco2dx,cocos creator,ETH,goworld等.本文记录一下搭建hexo的过程纯属经验之谈. 基本流程 安装前提 node.js mac下注意npm对user/local的权限问题 git 保证使用ssh和github进行认证测试通过：ssh -T git@github.com. 创建github仓库 例如github用户名为gameloses则仓库名为:gameloses.github.io 安装hexonpm install -g hexo-cli hexo init blog cd blog npm install 基本配置在 _config.yml 中修改大部份的配置 配置部署参数 deploy: type: git repository: git@github.com:gameloses/gameloses.github.io.git branch: master 安装部署插件 cd blog npm install hexo-deployer-git --save 安装首页文章显示插件 npm install --save hexo-auto-excerpt 设置显示字数： auto_excerpt: enable: true length: 300 手动添加文章描述 npm install --save hexo-front-matter-excerpt 在文章标题描述中添加：excerpt: xxxxxxxx 或者文章中添加 ““ 文章资源文件夹 post_asset_folder: true {% asset_img example.jpg This is an example image %} 发布上传博客hexo d -g 常见的其他命令 hexo s == hexo server //启动本地服务 hexo g == hexo generate //生成 hexo d == hexo deploy //发布 hexo n == hexo new //新建 书写文章hexo new post &quot;文章名字&quot;使用模板生成文章 title: cocos2dx引擎架构概述 comments: true date: 2018-11-23 20:51:11 tags: categories: 分类标签为了使分类标签生效需要生成两个page文件 hexo new page categories hexo new page tags 主题配置一个模仿github样式的主题 git clone git@github.com:sabrinaluo/hexo-theme-replica.git themes/replica Set theme: replica in _config.yml (the one in your root folder) 安装插件安装rssnpm install hero-generator-feed配置如下： plugin: - hexo-generator-feed feed: type: atom path: atom.xml limit: 20 rss: /atom.xml 绑定域名添加WWW和@主机记录，记录类型为CNAME. 在source目录下创建CNAME文件，文件内容为域名例如：chuangyutime.com QA mac下node安装好之后使用npm安装全局包会出现usr/local目录权限读写问题？sudo chown -R $USER /usr/local修改权限之后使用ls -l /usr/local 查看权限 分类标签404？需要创建两个page categories、tags vscode 编写markdown回退文本之后以后存在特殊的bs字符问题？显示隐藏字符 &quot;editor.renderControlCharacters&quot;: true安装插件：Remove backspace control character开启设置：&quot;editor.formatOnType&quot;: true 在被设定的情况下，进行变换时;输入时启动]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
